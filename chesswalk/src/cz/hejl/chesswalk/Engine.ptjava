/*
 * Copyright (C) 2010 Franti������������������������������������������������������ek Hejl
 *
 * This file is part of Chesswalk.
 *
 * Chesswalk is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Chesswalk is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Foobar.  If not, see <http://www.gnu.org/licenses/>.
 *
 */

package cz.hejl.chesswalk;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.atomic.AtomicInteger;

import pt.runtime.TaskID;
import pt.runtime.TaskIDGroup;

public class Engine {
	public AtomicInteger nodeCounter = new AtomicInteger(0);

	private static final int WINDOW = 10;
	private static final int[] PIECE_PRICES = { 0, 100, 300, 300, 500, 900,
		1000 };
	private static final String TAG = "Engine";

	private boolean allowNullGlobal = true;
	public int bestLineDepth;
	private int bestLineEval;
	private int bestMoveTimeLimit;
	private long bestMoveStart;
	private ArrayList<Move> bestLine;
	
	// -----------------------------------------------------------------------------------------------------------

	private Integer alphaBeta(int depth, int alpha, int beta, ArrayList<Move> line,
			boolean root, boolean allowNull, Board board, int currentDepth) {
		MoveComparator moveComparator = new MoveComparator();
		if (System.currentTimeMillis() - bestMoveStart > bestMoveTimeLimit
				&& !root)
			return new Integer(1234567890);// ***
		if (allowNullGlobal == false)
			allowNull = false;
		nodeCounter.incrementAndGet();
		int initialAlpha = alpha;

		int initialLineSize = line.size();
		ArrayList<Move> locLine = new ArrayList<Move>();
		ArrayList<Move> moves = null;
		moves = board.generateAllMoves();
		moveComparator.ply = currentDepth - depth + 1;
		Collections.sort(moves, moveComparator);

		if (depth <= 0) {
			int eval = board.evaluate();
			if (eval >= beta)
				return new Integer(beta);
			if (eval > alpha)
				alpha = eval;

			int capturesN = 0;
			for (int i = 0; i < moves.size(); i++) {
				if (moves.get(i).capture == 0)
					break;
				capturesN++;
			}
			moves.subList(capturesN, moves.size()).clear();
		}

		if (moves.size() == 0)
			return board.evaluate();

		//detecting mating threats by opponents
		if (allowNull && depth > 0) {
			if (!board.inCheck(board.toMove)) {
				board.toMove *= -1;
				int eval = -alphaBeta(depth - 1 - 2, -beta, -beta + 1, locLine,
						false, false, board,currentDepth + 1 );

				board.toMove *= -1;
				if (eval == -1234567890)
					return new Integer(1234567890); // ***

				if (eval >= beta) {
					return new Integer(beta);
				}
			}
		}

		for (int i = 0; i < moves.size(); i++) {
			locLine.clear();
			int eval;

			board.doMove(moves.get(i));
			if (board.isRepetition())
				eval = -50;
			else if (board.isDraw50Move())
				eval = -50;
			else {
				if (i >= 4 && currentDepth - depth >= 2
						&& !board.inCheck(board.toMove)
						&& moves.get(i).capture == 0) {
					eval = -alphaBeta(depth - 2, -alpha - 1, -alpha, locLine,
							false, true,board,currentDepth + 2);
					if (eval > alpha){
						eval = -alphaBeta(depth - 1, -beta, -alpha, locLine,
								false, true,board, currentDepth + 1);
					}
				} else{
					eval = -alphaBeta(depth - 1, -beta, -alpha, locLine, false,
							true,board,currentDepth + 1);
				}
			}
			board.undoMove(moves.get(i));
			if (eval == -1234567890)
				return new Integer(1234567890); // ***

			if (eval >= beta) {
				return new Integer(beta);
			}

			if (eval > alpha) {
				alpha = eval;

				line.subList(initialLineSize, line.size()).clear();
				line.add(moves.get(i));
				line.addAll(locLine);
			}

			// set best line
			if (root
					&& (eval > bestLineEval || eval == bestLineEval
					&& depth > bestLineDepth)
					&& initialAlpha == -1000000) {
				updateBestLine(line, depth, eval);
			}
		}

		if (root && alpha > initialAlpha) {
			updateBestLine(line, depth, alpha);
		}

		return new Integer(alpha);
	}


	private Integer PVSplit(int depth, int alpha, int beta, ArrayList<Move> line,
			boolean root, boolean allowNull, Board board, int currentDepth) {
		MoveComparator moveComparator = new MoveComparator();
		if (System.currentTimeMillis() - bestMoveStart > bestMoveTimeLimit
				&& !root)
			return new Integer(1234567890);// ***
		if (allowNullGlobal == false)
			allowNull = false;
		int initialAlpha = alpha;
		nodeCounter.incrementAndGet();
		int initialLineSize = line.size();
		ArrayList<Move> locLine = new ArrayList<Move>();
		ArrayList<Move> moves = null;
		moves = board.generateAllMoves();
		moveComparator.ply = currentDepth - depth + 1;
		Collections.sort(moves, moveComparator);

		if (depth <= 0) {
			int eval = board.evaluate();
			if (eval >= beta)
				return new Integer(beta);
			if (eval > alpha)
				alpha = eval;

			int capturesN = 0;
			for (int i = 0; i < moves.size(); i++) {
				if (moves.get(i).capture == 0)
					break;
				capturesN++;
			}
			moves.subList(capturesN, moves.size()).clear();
		}

		if (moves.size() == 0)
			return board.evaluate();

		board.doMove(moves.get(0));
		locLine.clear();
		int evalOne;

		if (board.isRepetition())
			evalOne = -50;
		else if (board.isDraw50Move())
			evalOne = -50;
		else {
			evalOne = -PVSplit(depth - 1, -beta, -alpha, locLine, false,
					true,board,currentDepth + 1);
		}
		board.undoMove(moves.get(0));
		if (evalOne == -1234567890)
			return new Integer(1234567890); // ***

		if (evalOne >= beta) {
			return new Integer(beta);
		}

		if (evalOne > alpha) {
			alpha = evalOne;
			line.subList(initialLineSize, line.size()).clear();
			line.add(moves.get(0));
			line.addAll(locLine);
		}

		// set best line
		if (root
				&& (evalOne > bestLineEval || evalOne == bestLineEval
				&& depth > bestLineDepth)
				&& initialAlpha == -1000000) {
			updateBestLine(line, depth, evalOne);
		}

		//this is now parallelizable
		AtomicInteger atomicAlpha = new AtomicInteger(alpha);
		AtomicInteger atomicBeta = new AtomicInteger(beta);
		AtomicInteger atomicEval = new AtomicInteger(0);
		TaskIDGroup<Void> g = new TaskIDGroup<Void>(moves.size());
		
		for (int i = 1; i < moves.size(); i++) {
			Board b1 = new Board(board);
			DoParallelLoop d = new  DoParallelLoop(atomicAlpha, atomicBeta, atomicEval, b1, moves, i, 
					depth, currentDepth, root, line, line.size(),initialAlpha);
			TaskID<Void> id = runParallelLoop(d);;
			g.add(id);
		}  
		try{
			g.waitTillFinished();
		}catch(InterruptedException e){
			e.printStackTrace();
		}catch (ExecutionException e){
			e.printStackTrace();
		}


		if (root && atomicAlpha.get() > initialAlpha) {
			updateBestLine(line, depth, atomicAlpha.get());
		}

		return new Integer(atomicAlpha.get());
	}
	// -----------------------------------------------------------------------------------------------------------

	public Move bestMove(String FEN, int depth, int time) {
		return bestMove(FEN, depth, time, false);
	}

	public Move bestMove(String FEN,int depth, int time, boolean verbose) {
		Board board = new Board(FEN);
		nodeCounter.set(0);;
		bestMoveTimeLimit = time;

		int eval = 0;
		bestLine = new ArrayList<Move>();
		bestLineDepth = 0;
		bestLineEval = -100000;
		bestMoveStart = System.currentTimeMillis();
		int currentDepth = 1;
		int alpha = -1000000;
		int beta = 1000000;
		while (true) {
			// don't run alphabeta if only 1 posible move
			if (currentDepth == 1) {
				ArrayList<Move> moves = board.generateAllMoves();
				if (moves.size() == 1) {
					bestLine = new ArrayList<Move>();
					bestLine.add(moves.get(0));
					break;
				}
			}
			eval = PVSplit(currentDepth, alpha, beta, new ArrayList<Move>(),
					true, true,board, currentDepth );
			if (eval == 1234567890)
				break;
			if (eval <= alpha || eval >= beta) {
				alpha = -1000000;
				beta = 1000000;
				continue;
			}
			alpha = eval - WINDOW;
			beta = eval + WINDOW;

			currentDepth++;
			if (currentDepth > depth)
				break;
			if (System.currentTimeMillis() - bestMoveStart > time)
				break;
		}

		// TODO have a look at this
		if (bestLine.size() == 0) {
			ArrayList<Move> moves = board.generateAllMoves();
			bestLine.add(moves.get(0));
		}

		System.out.println("ENGINE"+" : "+ "Depth = "+currentDepth+" , Nodes = "+nodeCounter);
		return bestLine.get(0);
	}

	// -----------------------------------------------------------------------------------------------------------

	private synchronized void updateBestLine(ArrayList<Move> line, int depth, int eval) {
		if (depth == bestLineDepth && eval == bestLineEval)
			return;
		bestLineDepth = depth;
		bestLineEval = eval;
		bestLine = line;

		String s = bestLineDepth + " : ";
		for (int i = 0; i < bestLine.size(); i++) {
			if (i == bestLineDepth)
				s += "| ";
			s += bestLine.get(i).toString() + " ";
		}
		s += " : " + (System.currentTimeMillis() - bestMoveStart) + " : "
				+ bestLineEval;
		System.out.println(TAG+" : "+ s);
	}

	// -----------------------------------------------------------------------------------------------------------

	private class MoveComparator implements Comparator<Move> {

		public int ply;

		public int compare(Move move1, Move move2) {
			int moveEval1 = moveEval(move1);
			int moveEval2 = moveEval(move2);
			if (moveEval1 > moveEval2)
				return -1;
			else if (moveEval2 > moveEval1)
				return 1;
			else
				return 0;
		}

		private int moveEval(Move move) {
			if (bestLine != null && bestLine.size() >= ply) {
				Move lastBest = bestLine.get(ply - 1);
				if (move.from == lastBest.from && move.to == lastBest.to
						&& move.piece == lastBest.piece)
					return 100000;
			}

			if (move.capture == 0)
				return 0;
			else {
				int capturePrice = PIECE_PRICES[Math.abs(move.capture)];
				int piecePrice = PIECE_PRICES[Math.abs(move.piece)];
				return capturePrice - piecePrice + 2000;
			}
		}
	}

	TASK private void runParallelLoop(DoParallelLoop l){
		l.run();
	}
	private class DoParallelLoop {
		AtomicInteger alpha;
		AtomicInteger beta;
		AtomicInteger result;
		Board b1;
		ArrayList<Move> locLine;
		ArrayList<Move> moves;
		int index;
		int depth;
		int currentDepth;
		ArrayList<Move> line;
		int initialLineSize;
		boolean root;
		int initialAlpha;
		
		private DoParallelLoop( AtomicInteger alpha, AtomicInteger beta, AtomicInteger eval, 
				Board board,ArrayList<Move> moves, int index, int depth, int currentDepth, 
				boolean root, ArrayList<Move> line, int intialLineSize, int initialAlpha){
			this.alpha = alpha;
			this.beta = beta;
			this.result = eval;
			this.b1 = board;
			this.locLine = new ArrayList<Move>();
			this.moves = moves;
			this.index = index;
			this.depth = depth;
			this.currentDepth = currentDepth;
			this.root = root;
			this.line = line;
			this.initialLineSize = intialLineSize;
			this.initialAlpha = initialAlpha;
		}
		public void run(){
			locLine.clear();
			int eval;

			b1.doMove(moves.get(index));
			if (b1.isRepetition())
				eval = -50;
			else if (b1.isDraw50Move())
				eval = -50;
			else {
				if (index >= 4 && currentDepth - depth >= 2
						&& !b1.inCheck(b1.toMove)
						&& moves.get(index).capture == 0) {
					eval = -alphaBeta(depth - 2, -alpha.get() - 1, -alpha.get(), locLine,
							false, true,new Board(b1),currentDepth + 2);
					if (eval > alpha.get()){
						eval = -alphaBeta(depth - 1, -beta.get(), -alpha.get(), locLine,
								false, true, new Board(b1), currentDepth + 1);
					}
				} else{
					eval = -alphaBeta(depth - 1, -beta.get(), -alpha.get(), locLine, false,
							true, new Board(b1),currentDepth + 1);
				}
			}
			b1.undoMove(moves.get(index));
			if (eval == -1234567890)
				//return new Integer(1234567890); // ***
				result.set(1234567890);

			if (eval >= beta.get()) {
				//stop all the other threads
				result.set(1234567890); 
			}

			if (eval > alpha.get()) {
				alpha.set( eval);					
				line.subList(initialLineSize, line.size()).clear();
				line.add(moves.get(index));
				line.addAll(locLine);

			}   

			// set best line
			if (root
					&& (eval > bestLineEval || eval == bestLineEval
					&& depth > bestLineDepth)
					&& initialAlpha == -1000000) {
				updateBestLine(line, depth, eval);
			}
			result.set(alpha.get());
		}
	}
}

