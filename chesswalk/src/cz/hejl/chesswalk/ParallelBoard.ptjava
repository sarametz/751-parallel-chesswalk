/*
 * Copyright (C) 2010 Franti������������������ek Hejl
 *
 * This file is part of Chesswalk.
 *
 * Chesswalk is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Chesswalk is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Foobar.  If not, see <http://www.gnu.org/licenses/>.
 *
 */

package cz.hejl.chesswalk;

import java.util.*;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.SynchronousQueue;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicLong;

import pt.runtime.TaskIDGroup;

public class ParallelBoard extends Board{

	private static int[] bishopDeltas = { 15, 17, -17, -15 };
	private static int[] kingDeltas = { 1, -16, -1, 16, 15, 17, -17, -15 };
	private static int[] knightDeltas = { 31, 33, 14, 18, -18, -14, -33, -31 };
	private static int[] queenDeltas = { 1, -16, -1, 16, 15, 17, -17, -15 };
	private static int[] rookDeltas = { 1, -16, -1, 16 };
	
	public ParallelBoard() {
		super();
	}

	public ParallelBoard(String FEN){
		super(FEN);
	}

	public ParallelBoard(Board b){
		super(b);
	}

	public ArrayList<Move> generateAllMoves() {
		List<Move> moves = Collections.synchronizedList(new ArrayList<Move>());

		TaskIDGroup<Void> pieces = new TaskIDGroup<Void>(128);

		// long startTime = System.nanoTime();
		for (int i = 0; i < 128; i++) {
			if ((i & 0x88) != 0)
				continue;
			TaskID<Void> id = generateMoves(board0x88[i], i, moves);
			pieces.add(id);
		}
		try{
			pieces.waitTillFinished();
		}catch(InterruptedException e){
			e.printStackTrace();
		}catch(ExecutionException e){
			e.printStackTrace();
		}
		//System.out.println("Non parallelised execution time is: "+ (time/count));
		//System.out.println("Total time is: "+time);

		removeIllegalMoves(moves);

		return new ArrayList<Move>(moves);
	}

	TASK private void generateMoves(int piece, int from, List<Move> moves) {
		long start = System.currentTimeMillis();
		if (toMove * piece < 0)
			return;
		int pieceType = Math.abs(piece);
		// pawns
		if (pieceType == 1) {
			generatePawnMoves(piece, from, moves);
		}
		// knight or king
		else if (pieceType == 2 || pieceType == 6) {
			generateNonSlidingMoves(piece, from, moves);
		}
		// bishop, rook or queen
		else if (pieceType >= 3 && pieceType <= 5) {
			generateSlidingMoves(piece, from, moves);
		}

		long fin = System.currentTimeMillis();
		//System.out.println(start-fin);
	}

	private void generateNonSlidingMoves(int piece, int from,
			List<Move> moves) {
		int[] deltas;
		if (piece == 2 || piece == -2)
			deltas = knightDeltas;
		else
			deltas = kingDeltas;

		for (int i = 0; i < deltas.length; i++) {
			int to = from + deltas[i];
			if ((to & 0x88) != 0)
				continue;
			if (board0x88[to] > 0 && piece > 0)
				continue;
			if (board0x88[to] < 0 && piece < 0)
				continue;
			moves.add(new Move(this, from, to));
		}

		// castling moves
		if (piece == 6) {
			if (castlingRights[0]) {
				if (board0x88[5] == 0 && board0x88[6] == 0) {
					if (squareAttacked(4, -1) == false
							&& squareAttacked(5, -1) == false
							&& squareAttacked(6, -1) == false) {
						moves.add(new Move(this, from, from + 2));
					}
				}
			}
			if (castlingRights[1]) {
				if (board0x88[1] == 0 && board0x88[2] == 0 && board0x88[3] == 0) {
					if (squareAttacked(2, -1) == false
							&& squareAttacked(3, -1) == false
							&& squareAttacked(4, -1) == false) {
						moves.add(new Move(this, from, from - 2));
					}
				}
			}
		} else if (piece == -6) {
			if (castlingRights[2]) {
				if (board0x88[117] == 0 && board0x88[118] == 0) {
					if (squareAttacked(116, 1) == false
							&& squareAttacked(117, 1) == false
							&& squareAttacked(118, 1) == false) {
						moves.add(new Move(this, from, from + 2));
					}
				}
			}
			if (castlingRights[3]) {
				if (board0x88[113] == 0 && board0x88[114] == 0
						&& board0x88[115] == 0) {
					if (squareAttacked(114, 1) == false
							&& squareAttacked(115, 1) == false
							&& squareAttacked(116, 1) == false) {
						moves.add(new Move(this, from, from - 2));
					}
				}
			}
		}
	}

	private void generateSlidingMoves(int piece, int from, List<Move> moves) {
		int[] deltas;
		if (piece == 3 || piece == -3)
			deltas = bishopDeltas;
		else if (piece == 4 || piece == -4)
			deltas = rookDeltas;
		else
			deltas = queenDeltas;

		for (int i = 0; i < deltas.length; i++) {
			int delta = deltas[i];
			int to = from;
			while (true) {
				to += delta;
				if ((to & 0x88) != 0)
					break;
				if (board0x88[to] > 0 && piece > 0 || board0x88[to] < 0
						&& piece < 0)
					break;
				if (board0x88[to] > 0 && piece < 0 || board0x88[to] < 0
						&& piece > 0) {
					moves.add(new Move(this, from, to));
					break;
				}
				moves.add(new Move(this, from, to));
			}
		}
	}

	private void generatePawnMoves(int piece, int from, List<Move> moves) {
		// white pawns
		if (piece == 1) {
			// normal move (1 squar ahead)
			if (board0x88[from + 16] == 0)
				moves.add(new Move(this, from, from + 16));
			// 2 squares ahead
			if (from / 16 == 1 && board0x88[from + 16] == 0
					&& board0x88[from + 2 * 16] == 0)
				moves.add(new Move(this, from, from + 2 * 16));
			// capturing moves
			if (board0x88[from + 15] < 0 && ((from + 15) & 0x88) == 0)
				moves.add(new Move(this, from, from + 15));
			if (board0x88[from + 17] < 0 && ((from + 17) & 0x88) == 0)
				moves.add(new Move(this, from, from + 17));
			// en passant capture
			if (enPassant != -1 && enPassant / 16 == 5) {
				if (from + 15 == enPassant || from + 17 == enPassant)
					moves.add(new Move(this, from, enPassant));
			}
		}

		// black pawns
		else if (piece == -1) {
			// normal move (1 square ahead)
			if (board0x88[from - 16] == 0)
				moves.add(new Move(this, from, from - 16));
			// 2 squares ahead
			if (from / 16 == 6 && board0x88[from - 16] == 0
					&& board0x88[from - 2 * 16] == 0)
				moves.add(new Move(this, from, from - 2 * 16));
			// capturing moves
			if (((from - 15) & 0x88) == 0 && board0x88[from - 15] > 0)
				moves.add(new Move(this, from, from - 15));
			if (((from - 17) & 0x88) == 0 && board0x88[from - 17] > 0)
				moves.add(new Move(this, from, from - 17));
			// en passant capture
			if (enPassant != -1 && enPassant / 16 == 2) {
				if (from - 15 == enPassant || from - 17 == enPassant)
					moves.add(new Move(this, from, enPassant));
			}
		}
	}

	/** color can be 1 for white or -1 for black */
	public boolean inCheck(int color) {
		// find king
		int king = -1;
		for (int i = 0; i < 128; i++) {
			if ((i & 0x88) != 0)
				continue;
			if (board0x88[i] == 6 * color) {
				king = i;
				break;
			}
		}

		return squareAttacked(king, color * -1);
	}

	public boolean isCheckmate() {
		if (generateAllMoves().size() == 0 && inCheck(toMove)) {
			return true;
		} else
			return false;
	}

	public boolean isDraw50Move() {
		if (halfmoves >= 100)
			return true;
		else
			return false;
	}

	public boolean isEndgame() {
		boolean wQueen = false;
		boolean bQueen = false;
		int wRooks = 0;
		int bRooks = 0;
		int wMinors = 0;
		int bMinors = 0;

		for (int i = 0; i < 128; i++) {
			if ((i & 0x88) != 0)
				continue;
			int piece = board0x88[i];
			switch (piece) {
			case 5:
				wQueen = true;
			case -5:
				bQueen = true;
			case 4:
				wRooks++;
			case -4:
				bRooks++;
			case 3:
				wMinors--;
			case -3:
				bMinors--;
			case 2:
				wMinors--;
			case -2:
				bMinors--;
			}
		}

		boolean endgame = true;
		if (wQueen && (wMinors > 1 || wRooks > 0))
			endgame = false;
		if (bQueen && (bMinors > 1 || bRooks > 0))
			endgame = false;

		return endgame;
	}

	public boolean isRepetition() {
		int hits = 1;
		for (int i = hashHistory.size() - 2; i >= 0; i--) {
			if (hashHistory.get(i) == hash)
				hits++;
		}

		if (hits >= 3) {
			return true;
		} else
			return false;
	}

	public boolean isStalemate() {
		if (generateAllMoves().size() == 0 && !inCheck(toMove)) {
			return true;
		} else
			return false;
	}

	private void removeIllegalMoves(List<Move> moves) {
		Iterator<Move> iter = moves.iterator();
		while (iter.hasNext()) {
			int color = toMove;
			Move move = (Move) iter.next();
			doMove(move);
			boolean illegalMove = false;
			if (inCheck(color))
				illegalMove = true;
			undoMove(move);
			if (illegalMove)
				iter.remove();
		}
	}

}
